{"ast":null,"code":"/*Axios is a promise based HTTP client for the browser and Node. js\r\nsend asynchronous HTTP requests to REST endpoints and perform CRUD operations*/\nimport axios from \"axios\"; //redux store\n\nimport store from \"../store\"; //logout action\n\nimport { logout } from \"../store/actions/auth\"; //creates an AXIOS instance used to make requests to the Back-End\n// const API = axios.create({\n//     baseURL: \"http://127.0.0.1:3000\",\n//     headers: {\n//         \"Accept\": \"application/json\",\n//         \"Authorization\": `Bearer ${localStorage.getItem(\"token\").replace(/^\"(.*)\"$/, '$1') || \"\"}`  //check if we already have a token and set it\n//     }\n// })\n\nif (localStorage.getItem(\"token\") != \"null\") {\n  const token = localStorage.getItem(\"token\").replace(/^\"(.*)\"$/, '$1');\n} else {\n  const token = \"\";\n}\n\nconsole.log(localStorage.getItem(\"token\"));\nconsole.log(token);\nconst API = axios.create({\n  baseURL: \"http://127.0.0.1:3000\",\n  headers: {\n    \"Accept\": \"application/json\",\n    \"Authorization\": \"\"\n  }\n}); //create interceptor to listen to errors\n\nAPI.interceptors.response.use( //successful response\nres => {\n  return res;\n}, err => {\n  // token expired errors are always 401 error\n  if (err.response.status !== 401) {\n    throw err;\n  }\n\n  if (typeof err.response.data.error.name !== \"undefined\") {\n    if (err.response.data.error.name === \"TokenExpiredError\") {\n      //this error is provided by JWT\n      //logout user\n      store.dispatch(logout());\n      throw err;\n    }\n  }\n});\nexport default API;","map":{"version":3,"sources":["C:/Users/kazim/Desktop/chatApp/chat-frontend/src/services/api.js"],"names":["axios","store","logout","localStorage","getItem","token","replace","console","log","API","create","baseURL","headers","interceptors","response","use","res","err","status","data","error","name","dispatch"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CACA;;AACA,SAAQC,MAAR,QAAqB,uBAArB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,MAApC,EAA4C;AACxC,QAAMC,KAAK,GAAGF,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BE,OAA9B,CAAsC,UAAtC,EAAkD,IAAlD,CAAd;AACH,CAFD,MAEK;AACD,QAAMD,KAAK,GAAG,EAAd;AACH;;AACDE,OAAO,CAACC,GAAR,CAAYL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACAG,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEA,MAAMI,GAAG,GAAGT,KAAK,CAACU,MAAN,CAAa;AACrBC,EAAAA,OAAO,EAAE,uBADY;AAErBC,EAAAA,OAAO,EAAE;AACL,cAAU,kBADL;AAEL,qBAAiB;AAFZ;AAFY,CAAb,CAAZ,C,CASA;;AACAH,GAAG,CAACI,YAAJ,CAAiBC,QAAjB,CAA0BC,GAA1B,EAEI;AACAC,GAAG,IAAI;AACH,SAAOA,GAAP;AACH,CALL,EAMIC,GAAG,IAAI;AACH;AACA,MAAIA,GAAG,CAACH,QAAJ,CAAaI,MAAb,KAAwB,GAA5B,EAAgC;AAC5B,UAAMD,GAAN;AACH;;AAED,MAAI,OAAOA,GAAG,CAACH,QAAJ,CAAaK,IAAb,CAAkBC,KAAlB,CAAwBC,IAA/B,KAAwC,WAA5C,EAAwD;AACpD,QAAIJ,GAAG,CAACH,QAAJ,CAAaK,IAAb,CAAkBC,KAAlB,CAAwBC,IAAxB,KAAkC,mBAAtC,EAA0D;AAAG;AACzD;AACApB,MAAAA,KAAK,CAACqB,QAAN,CAAepB,MAAM,EAArB;AAEA,YAAMe,GAAN;AACH;AACJ;AACJ,CApBL;AAyBA,eAAeR,GAAf","sourcesContent":["/*Axios is a promise based HTTP client for the browser and Node. js\r\nsend asynchronous HTTP requests to REST endpoints and perform CRUD operations*/\r\nimport axios from \"axios\"\r\n//redux store\r\nimport store from \"../store\"\r\n//logout action\r\nimport {logout} from \"../store/actions/auth\"\r\n\r\n\r\n//creates an AXIOS instance used to make requests to the Back-End\r\n// const API = axios.create({\r\n//     baseURL: \"http://127.0.0.1:3000\",\r\n//     headers: {\r\n//         \"Accept\": \"application/json\",\r\n//         \"Authorization\": `Bearer ${localStorage.getItem(\"token\").replace(/^\"(.*)\"$/, '$1') || \"\"}`  //check if we already have a token and set it\r\n//     }\r\n// })\r\nif(localStorage.getItem(\"token\") != \"null\" ){\r\n    const token = localStorage.getItem(\"token\").replace(/^\"(.*)\"$/, '$1')\r\n}else{\r\n    const token = \"\"\r\n}\r\nconsole.log(localStorage.getItem(\"token\"))\r\nconsole.log(token)\r\n\r\nconst API = axios.create({\r\n    baseURL: \"http://127.0.0.1:3000\",\r\n    headers: {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": \"\"\r\n    }\r\n})\r\n\r\n\r\n//create interceptor to listen to errors\r\nAPI.interceptors.response.use(\r\n\r\n    //successful response\r\n    res => {\r\n        return res\r\n    },\r\n    err => {\r\n        // token expired errors are always 401 error\r\n        if (err.response.status !== 401){\r\n            throw err\r\n        }\r\n\r\n        if (typeof err.response.data.error.name !== \"undefined\"){\r\n            if (err.response.data.error.name  === \"TokenExpiredError\"){  //this error is provided by JWT\r\n                //logout user\r\n                store.dispatch(logout())\r\n                \r\n                throw err\r\n            }\r\n        }\r\n    }\r\n\r\n)\r\n\r\n\r\nexport default API"]},"metadata":{},"sourceType":"module"}