{"ast":null,"code":"import API from \"./api\";\nconst AuthService = {\n  login: data => {\n    return API.post(\"/login\", data).then(res => {\n      setHeadersAndStorage(res.data.user, res.data.token);\n      return res.data;\n    }).catch(err => {\n      console.log(\"Auth service err\", err);\n    });\n  },\n  register: data => {\n    return API.post(\"/register\", data).then(res => {\n      setHeadersAndStorage(res.user, res.token);\n      return res.data;\n    }).catch(err => {\n      console.log(\"Auth service err\", err);\n    });\n  },\n  logout: () => {\n    //remove the JWT token from the AXIOS instance\n    API.defaults.headers[\"Authorization\"] = \"\"; //remove user&token from local storage\n\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n  },\n  updateProfile: data => {\n    //create new header since we are sending form data and not just JSON object data\n    const headers = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n    return API.post(\"/users/update\", data, headers).then(res => {\n      //save user\n      localStorage.setItem(\"user\", JSON.stringify(res.data));\n      return res.data;\n    }).catch(err => {\n      console.log(\"Auth service err\", err);\n    });\n  }\n};\n\nconst setHeadersAndStorage = (user, token) => {\n  //set applicaion headers of AXIOS instance\n  //can now set the authorization default header using the JWT Token sent form the server\n  //whenever we make contact with the server, we use the token for authorization\n  //This will allow the server to know which user is making contact\n  API.defaults.headers[\"Authorization\"] = `Bearer ${token}`; //save user&token to local storage\n  //we cannot store a JS object. Must convert to string.\n\n  localStorage.setItem(\"user\", JSON.stringify(user));\n  localStorage.setItem(\"token\", JSON.stringify(token));\n};\n\nexport default AuthService;","map":{"version":3,"sources":["C:/Users/kazim/Desktop/chatApp/chat-frontend/src/services/authService.js"],"names":["API","AuthService","login","data","post","then","res","setHeadersAndStorage","user","token","catch","err","console","log","register","logout","defaults","headers","localStorage","removeItem","updateProfile","setItem","JSON","stringify"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,KAAK,EAAGC,IAAD,IAAU;AACb,WAAOH,GAAG,CAACI,IAAJ,CAAS,QAAT,EAAmBD,IAAnB,EACNE,IADM,CACAC,GAAD,IAAO;AACTC,MAAAA,oBAAoB,CAACD,GAAG,CAACH,IAAJ,CAASK,IAAV,EAAgBF,GAAG,CAACH,IAAJ,CAASM,KAAzB,CAApB;AACA,aAAOH,GAAG,CAACH,IAAX;AACH,KAJM,EAKNO,KALM,CAKCC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,GAAhC;AACH,KAPM,CAAP;AAQH,GAVe;AAWhBG,EAAAA,QAAQ,EAAGX,IAAD,IAAU;AAChB,WAAOH,GAAG,CAACI,IAAJ,CAAS,WAAT,EAAsBD,IAAtB,EACNE,IADM,CACAC,GAAD,IAAO;AACTC,MAAAA,oBAAoB,CAACD,GAAG,CAACE,IAAL,EAAWF,GAAG,CAACG,KAAf,CAApB;AACA,aAAOH,GAAG,CAACH,IAAX;AACH,KAJM,EAKNO,KALM,CAKCC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,GAAhC;AACH,KAPM,CAAP;AAQH,GApBe;AAqBhBI,EAAAA,MAAM,EAAE,MAAM;AACV;AACAf,IAAAA,GAAG,CAACgB,QAAJ,CAAaC,OAAb,CAAqB,eAArB,IAAwC,EAAxC,CAFU,CAGV;;AACAC,IAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACAD,IAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACH,GA3Be;AA4BhBC,EAAAA,aAAa,EAAGjB,IAAD,IAAU;AACrB;AACA,UAAMc,OAAO,GAAG;AACZA,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AADG,KAAhB;AAIA,WAAOjB,GAAG,CAACI,IAAJ,CAAS,eAAT,EAA0BD,IAA1B,EAAgCc,OAAhC,EACNZ,IADM,CACAC,GAAD,IAAO;AACT;AACAY,MAAAA,YAAY,CAACG,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAejB,GAAG,CAACH,IAAnB,CAA7B;AACA,aAAOG,GAAG,CAACH,IAAX;AACH,KALM,EAMNO,KANM,CAMCC,GAAD,IAAS;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,GAAhC;AACH,KARM,CAAP;AASH;AA3Ce,CAApB;;AA8CA,MAAMJ,oBAAoB,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1C;AACA;AACA;AACA;AACAT,EAAAA,GAAG,CAACgB,QAAJ,CAAaC,OAAb,CAAqB,eAArB,IAAyC,UAASR,KAAM,EAAxD,CAL0C,CAO1C;AACA;;AACAS,EAAAA,YAAY,CAACG,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAef,IAAf,CAA7B;AACAU,EAAAA,YAAY,CAACG,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAed,KAAf,CAA9B;AACH,CAXD;;AAaA,eAAeR,WAAf","sourcesContent":["import API from \"./api\"\r\n\r\nconst AuthService = {\r\n    login: (data) => {\r\n        return API.post(\"/login\", data) \r\n        .then((res)=>{\r\n            setHeadersAndStorage(res.data.user, res.data.token)\r\n            return res.data\r\n        })\r\n        .catch((err) => {\r\n            console.log(\"Auth service err\", err)\r\n        })\r\n    },\r\n    register: (data) => {\r\n        return API.post(\"/register\", data)\r\n        .then((res)=>{\r\n            setHeadersAndStorage(res.user, res.token)\r\n            return res.data\r\n        })\r\n        .catch((err) => {\r\n            console.log(\"Auth service err\", err)\r\n        })\r\n    },\r\n    logout: () => {\r\n        //remove the JWT token from the AXIOS instance\r\n        API.defaults.headers[\"Authorization\"] = \"\"\r\n        //remove user&token from local storage\r\n        localStorage.removeItem(\"user\")\r\n        localStorage.removeItem(\"token\")\r\n    },\r\n    updateProfile: (data) => {\r\n        //create new header since we are sending form data and not just JSON object data\r\n        const headers = {\r\n            headers: {\"Content-Type\": \"application/x-www-form-urlencoded\"}\r\n        }\r\n        \r\n        return API.post(\"/users/update\", data, headers)\r\n        .then((res)=>{\r\n            //save user\r\n            localStorage.setItem(\"user\", JSON.stringify(res.data))\r\n            return res.data\r\n        })\r\n        .catch((err) => {\r\n            console.log(\"Auth service err\", err)\r\n        })\r\n    }\r\n}\r\n\r\nconst setHeadersAndStorage = (user, token) => {\r\n    //set applicaion headers of AXIOS instance\r\n    //can now set the authorization default header using the JWT Token sent form the server\r\n    //whenever we make contact with the server, we use the token for authorization\r\n    //This will allow the server to know which user is making contact\r\n    API.defaults.headers[\"Authorization\"] = `Bearer ${token}`\r\n    \r\n    //save user&token to local storage\r\n    //we cannot store a JS object. Must convert to string.\r\n    localStorage.setItem(\"user\", JSON.stringify(user))  \r\n    localStorage.setItem(\"token\", JSON.stringify(token))\r\n}\r\n\r\nexport default AuthService"]},"metadata":{},"sourceType":"module"}