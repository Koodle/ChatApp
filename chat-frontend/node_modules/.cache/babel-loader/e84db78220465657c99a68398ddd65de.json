{"ast":null,"code":"//To make HTTP requests to our Back-End\nimport AuthService from \"../../services/authService\";\nimport { LOGIN, REGISTER, LOGOUT, UPDATE_PROFILE } from \"../types/index\";\n/*\r\n-Components will trigger actions from events (button clicks, form submits)\r\n-Actions are objects that contain Type & Payload\r\n-Type determines what in the Store gets updated\r\n-Payload represents data to be added, updated or removed from the store\r\n*/\n//dispatch allows us to perform async code\n\nexport const login = (params, useNavigate) => dispatch => {\n  var _s = $RefreshSig$();\n\n  //how do we chain anonymous functions here?  \n  return _s(AuthService.login(params).then(_s(data => {\n    _s();\n\n    //https://stackoverflow.com/questions/61286885/how-action-and-reducers-are-connected-with-each-other-in-react-redux\n    dispatch({\n      type: LOGIN,\n      payload: data\n    }); //dispatch the action  //why don't we reference the relevant Reducer for this action //how do we call the reducer //how does the dispatch function know where the reducer is?\n\n    useNavigate(\"/\"); //Navigate to chat screen\n  }, \"7z+bV9xHBQ1A1bt6m/1oQLk0tZA=\", false, function () {\n    return [useNavigate];\n  })), \"7z+bV9xHBQ1A1bt6m/1oQLk0tZA=\", false, function () {\n    return [useNavigate];\n  }).catch(err => {});\n};\nexport const register = (params, useNavigate) => dispatch => {\n  var _s2 = $RefreshSig$();\n\n  return _s2(AuthService.register(params).then(_s2(data => {\n    _s2();\n\n    dispatch({\n      type: REGISTER,\n      payload: data\n    });\n    useNavigate(\"/\");\n  }, \"7z+bV9xHBQ1A1bt6m/1oQLk0tZA=\", false, function () {\n    return [useNavigate];\n  })), \"7z+bV9xHBQ1A1bt6m/1oQLk0tZA=\", false, function () {\n    return [useNavigate];\n  }).catch(err => {});\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  }); // to dispatch the ACTION (Run the REDUCER)\n};\nexport const updateProfile = params => dispatch => {\n  return AuthService.updateProfile(params).then(data => {\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: data\n    });\n  }).catch(err => {\n    throw err;\n  });\n};","map":{"version":3,"sources":["C:/Users/kazim/Desktop/chatApp/chat-frontend/src/store/actions/auth.js"],"names":["AuthService","LOGIN","REGISTER","LOGOUT","UPDATE_PROFILE","login","params","useNavigate","dispatch","then","data","type","payload","catch","err","register","logout","updateProfile"],"mappings":"AAAA;AACA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,cAAlC,QAAwD,gBAAxD;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,MAAD,EAASC,WAAT,KAA0BC,QAAD,IAAc;AAAA;;AAAG;AAC3D,SAAO,GAAAR,WAAW,CAACK,KAAZ,CAAkBC,MAAlB,EACFG,IADE,IACIC,IAAD,IAAQ;AAAA;;AACV;AACAF,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAEV,KAAP;AAAcW,MAAAA,OAAO,EAACF;AAAtB,KAAD,CAAR,CAFU,CAE6B;;AACvCH,IAAAA,WAAW,CAAC,GAAD,CAAX,CAHU,CAGS;AACtB,GALE;AAAA,YAICA,WAJD;AAAA;AAAA,YAICA,WAJD;AAAA,KAMFM,KANE,CAMIC,GAAG,IAAI,CAEb,CARE,CAAP;AASH,CAVM;AAYP,OAAO,MAAMC,QAAQ,GAAG,CAACT,MAAD,EAASC,WAAT,KAA0BC,QAAD,IAAc;AAAA;;AAC3D,SAAO,IAAAR,WAAW,CAACe,QAAZ,CAAqBT,MAArB,EACFG,IADE,KACIC,IAAD,IAAQ;AAAA;;AACVF,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAET,QAAP;AAAiBU,MAAAA,OAAO,EAACF;AAAzB,KAAD,CAAR;AACAH,IAAAA,WAAW,CAAC,GAAD,CAAX;AACH,GAJE;AAAA,YAGCA,WAHD;AAAA;AAAA,YAGCA,WAHD;AAAA,KAKFM,KALE,CAKIC,GAAG,IAAI,CAEb,CAPE,CAAP;AAQH,CATM;AAWP,OAAO,MAAME,MAAM,GAAG,MAAOR,QAAD,IAAc;AACtCR,EAAAA,WAAW,CAACgB,MAAZ;AACAR,EAAAA,QAAQ,CAAC;AAACG,IAAAA,IAAI,EAAER;AAAP,GAAD,CAAR,CAFsC,CAEZ;AAC7B,CAHM;AAKP,OAAO,MAAMc,aAAa,GAAIX,MAAD,IAAaE,QAAD,IAAc;AACnD,SAAOR,WAAW,CAACiB,aAAZ,CAA0BX,MAA1B,EACFG,IADE,CACIC,IAAD,IAAQ;AACVF,IAAAA,QAAQ,CAAC;AAACG,MAAAA,IAAI,EAAEP,cAAP;AAAuBQ,MAAAA,OAAO,EAACF;AAA/B,KAAD,CAAR;AACH,GAHE,EAIFG,KAJE,CAIIC,GAAG,IAAI;AACV,UAAMA,GAAN;AACH,GANE,CAAP;AAOH,CARM","sourcesContent":["//To make HTTP requests to our Back-End\r\nimport AuthService from \"../../services/authService\"\r\nimport { LOGIN, REGISTER, LOGOUT, UPDATE_PROFILE } from \"../types/index\"\r\n\r\n\r\n/*\r\n-Components will trigger actions from events (button clicks, form submits)\r\n-Actions are objects that contain Type & Payload\r\n-Type determines what in the Store gets updated\r\n-Payload represents data to be added, updated or removed from the store\r\n*/\r\n\r\n//dispatch allows us to perform async code\r\nexport const login = (params, useNavigate) => (dispatch) => {  //how do we chain anonymous functions here?  \r\n    return AuthService.login(params)\r\n        .then((data)=>{\r\n            //https://stackoverflow.com/questions/61286885/how-action-and-reducers-are-connected-with-each-other-in-react-redux\r\n            dispatch({type: LOGIN, payload:data})  //dispatch the action  //why don't we reference the relevant Reducer for this action //how do we call the reducer //how does the dispatch function know where the reducer is?\r\n            useNavigate(\"/\")   //Navigate to chat screen\r\n        })\r\n        .catch(err => {\r\n            \r\n        })\r\n}\r\n\r\nexport const register = (params, useNavigate) => (dispatch) => {   \r\n    return AuthService.register(params)\r\n        .then((data)=>{\r\n            dispatch({type: REGISTER, payload:data})\r\n            useNavigate(\"/\")\r\n        })\r\n        .catch(err => {\r\n            \r\n        })\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    AuthService.logout()\r\n    dispatch({type: LOGOUT})  // to dispatch the ACTION (Run the REDUCER)\r\n}\r\n\r\nexport const updateProfile = (params) => (dispatch) => {\r\n    return AuthService.updateProfile(params)\r\n        .then((data)=>{\r\n            dispatch({type: UPDATE_PROFILE, payload:data})\r\n        })\r\n        .catch(err => {\r\n            throw err\r\n        })\r\n}"]},"metadata":{},"sourceType":"module"}