{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kazim\\\\Desktop\\\\chatApp\\\\chat-frontend\\\\src\\\\components\\\\Chat\\\\components\\\\Navbar\\\\Navbar.js\",\n    _s = $RefreshSig$();\n\n//useState - a way of adding properties to this component withought creating a JS class\n\n/*fragment - allows us to wrap jsx code & other components inside but when it gets rendered, it will only render those componenets, without any wrapping element/node because fragments are not rendered to the DOM.\r\nSo basically we use React.Fragment where we would normally use a wrapper div. https://dev.to/tumee/react-fragments-what-why-how-2kh1*/\nimport React, { useState, Fragment } from \"react\"; //useSelector - to access the store\n//useDispatch - to call any ACTIONS\n\nimport { useSelector, useDispatch } from \"react-redux\"; //to use font awesome in a react component\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"; //Action to logout\n\nimport { logout } from \"../../../../store/actions/auth\"; //Action to update profile\n\nimport { updateProfile } from \"../../../../store/actions/auth\"; //Modal Component\n\nimport Modal from \"../../../Modal/Modal\";\nimport \"./Navbar.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Navbar = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.authReducer.user); //we use these state properties to toggle visiblity of Component\n\n  const [showProfileOptions, setShowProfileOptions] = useState(false);\n  const [showProfileModal, setShowProfileModal] = useState(false); //variables to track the info in the form\n\n  const [firstName, setFirstName] = useState(user.firstName);\n  const [lastName, setLastName] = useState(user.lastName);\n  const [email, setEmail] = useState(user.email);\n  const [gender, setGender] = useState(user.gender);\n  const [password, setPassword] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n\n  const submitForm = async e => {\n    //we dont want to execute the default behaviour of form submission,\n    //since we want to implement our own logic here\n    e.preventDefault();\n    const form = {\n      firstName,\n      lastName,\n      email,\n      gender,\n      avatar\n    };\n    if (password.length > 0) form.password = password; //since uploading image, use a form data object to upload\n\n    const formData = new FormData(); //create the key value pairs\n\n    for (const key in form) {\n      formData.append(key, form[key]);\n    } //dispatch action\n\n\n    await dispatch(updateProfile(formData)).then(() => {\n      setShowProfileModal(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"navbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat.io\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => {\n        setShowProfileOptions(!showProfileOptions);\n      },\n      id: \"profile-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        width: \"40\",\n        height: \"40\",\n        src: user.avatar,\n        alt: \"Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [user.firstName, \" \", user.lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: \"caret-down\",\n        className: \"fa-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this),\n      /* If you're just checking for a condition\r\n      and don't want to render a particular piece of code that doesn't comply, \r\n      you can use the && operator. */\n      showProfileOptions && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"profile-options\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => {\n            setShowProfileModal(true);\n          },\n          children: \"Update Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => {\n            dispatch(logout());\n          },\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), showProfileModal && /*#__PURE__*/_jsxDEV(Modal, {\n        click: () => setShowProfileModal(false),\n        children: [\" \", /*#__PURE__*/_jsxDEV(Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"m-0\",\n            children: \"Update profile\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)\n        }, \"header\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            id: \"form-update-profile\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-field mb-1\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => setFirstName(e.target.value) //change the \"useState\" variable\n                ,\n                value: firstName //The initial value of the control\n                ,\n                required: \"required\",\n                type: \"text\",\n                placeholder: \"First Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-field mb-1\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => setLastName(e.target.value),\n                value: lastName,\n                required: \"required\",\n                type: \"text\",\n                placeholder: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-field mb-1\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => setEmail(e.target.value),\n                value: email,\n                required: \"required\",\n                type: \"text\",\n                placeholder: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-field mb-1\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                onChange: e => setGender(e.target.value),\n                value: gender,\n                required: \"required\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"male\",\n                  children: \"Male\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 125,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"female\",\n                  children: \"Female\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-field mb-2\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => setPassword(e.target.value),\n                value: password,\n                required: \"required\",\n                type: \"password\",\n                placeholder: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-field mb-2\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                onChange: e => setAvatar(e.target.files[0]),\n                type: \"file\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)\n        }, \"body\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-success\",\n            onClick: submitForm,\n            children: \"UPDATE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)\n        }, \"footer\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Navbar, \"Y6409p+BX/RDH8+PE1lch8IPf2Y=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["C:/Users/kazim/Desktop/chatApp/chat-frontend/src/components/Chat/components/Navbar/Navbar.js"],"names":["React","useState","Fragment","useSelector","useDispatch","FontAwesomeIcon","logout","updateProfile","Modal","Navbar","dispatch","user","state","authReducer","showProfileOptions","setShowProfileOptions","showProfileModal","setShowProfileModal","firstName","setFirstName","lastName","setLastName","email","setEmail","gender","setGender","password","setPassword","avatar","setAvatar","submitForm","e","preventDefault","form","length","formData","FormData","key","append","then","target","value","files"],"mappings":"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","sourcesContent":["//useState - a way of adding properties to this component withought creating a JS class\r\n/*fragment - allows us to wrap jsx code & other components inside but when it gets rendered, it will only render those componenets, without any wrapping element/node because fragments are not rendered to the DOM.\r\nSo basically we use React.Fragment where we would normally use a wrapper div. https://dev.to/tumee/react-fragments-what-why-how-2kh1*/\r\nimport React, { useState, Fragment } from \"react\" \r\n//useSelector - to access the store\r\n//useDispatch - to call any ACTIONS\r\nimport {useSelector, useDispatch } from \"react-redux\"  \r\n//to use font awesome in a react component\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\n//Action to logout\r\nimport { logout } from \"../../../../store/actions/auth\"\r\n//Action to update profile\r\nimport { updateProfile } from \"../../../../store/actions/auth\" \r\n//Modal Component\r\nimport Modal from \"../../../Modal/Modal\"  \r\n\r\nimport \"./Navbar.scss\"\r\n\r\nconst Navbar = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const user = useSelector((state) => state.authReducer.user)\r\n\r\n\r\n    //we use these state properties to toggle visiblity of Component\r\n    const [showProfileOptions, setShowProfileOptions] = useState(false)\r\n    const [showProfileModal, setShowProfileModal] = useState(false) \r\n\r\n    //variables to track the info in the form\r\n    const [firstName, setFirstName] = useState(user.firstName)\r\n    const [lastName, setLastName] = useState(user.lastName)\r\n    const [email, setEmail] = useState(user.email)\r\n    const [gender, setGender] = useState(user.gender)\r\n    const [password, setPassword] = useState(\"\")\r\n    const [avatar, setAvatar] = useState(\"\")\r\n\r\n    const submitForm = async (e) => {\r\n        //we dont want to execute the default behaviour of form submission,\r\n        //since we want to implement our own logic here\r\n        e.preventDefault()\r\n\r\n        const form = {firstName, lastName, email, gender, avatar}\r\n        if(password.length > 0 ) form.password = password\r\n\r\n        //since uploading image, use a form data object to upload\r\n        const formData = new FormData()\r\n\r\n        //create the key value pairs\r\n        for(const key in form){\r\n            formData.append(key, form[key])\r\n        }\r\n\r\n        //dispatch action\r\n        await dispatch(updateProfile(formData)).then(() => {\r\n            setShowProfileModal(false)\r\n        })\r\n\r\n    } \r\n\r\n\r\n    return (\r\n        <div id=\"navbar\">\r\n            <h2>Chat.io</h2>\r\n            {/* profile */}\r\n            <div onClick={()=>{setShowProfileOptions(!showProfileOptions)}} id=\"profile-menu\">\r\n                <img width={\"40\"} height={\"40\"} src={user.avatar} alt=\"Avatar\"/> \r\n                <p>{user.firstName} {user.lastName}</p>\r\n                <FontAwesomeIcon icon={\"caret-down\"} className=\"fa-icon\"/>\r\n\r\n\r\n                {/* dropdown */}\r\n                {   \r\n                    /* If you're just checking for a condition\r\n                    and don't want to render a particular piece of code that doesn't comply, \r\n                    you can use the && operator. */\r\n                    showProfileOptions && \r\n                    <div id=\"profile-options\">\r\n                        <p onClick={()=>{setShowProfileModal(true)}}>Update Profile</p>\r\n                        <p onClick={()=>{dispatch(logout())}}>Logout</p>\r\n                    </div>\r\n                }\r\n\r\n                {/* Update Profile Form */}\r\n                {\r\n                    showProfileModal &&\r\n                    <Modal click={()=>setShowProfileModal(false)}> {/*click func passed into <Modal> component as a prop */}\r\n                        {/* All of these Fragments/elements are passed to the Modal component as props.children as an array*/}\r\n                        {/* Assign a key to each fragment to differentiate between them, in the Model component */}\r\n                        <Fragment key={\"header\"}>\r\n                            <h3 className=\"m-0\">Update profile</h3>\r\n                        </Fragment>\r\n\r\n                        <Fragment key={\"body\"}>\r\n                            <form id=\"form-update-profile\">\r\n                                <div className=\"input-field mb-1\">\r\n                                    <input\r\n                                        onChange={(e) => setFirstName(e.target.value )}  //change the \"useState\" variable\r\n                                        value={firstName}  //The initial value of the control\r\n                                        required=\"required\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"First Name\" />\r\n                                </div>\r\n\r\n                                <div className=\"input-field mb-1\">\r\n                                    <input \r\n                                    onChange={(e) => setLastName(e.target.value )}  \r\n                                    value={lastName}  \r\n                                    required=\"required\"\r\n                                    type=\"text\"placeholder=\"Last Name\" />\r\n                                </div>\r\n                                \r\n                                <div className=\"input-field mb-1\">\r\n                                    <input \r\n                                    onChange={(e) => setEmail(e.target.value )}  \r\n                                    value={email}  \r\n                                    required=\"required\"\r\n                                    type=\"text\"placeholder=\"Email\" />\r\n                                </div>\r\n\r\n                                <div className=\"input-field mb-1\">\r\n                                    <select\r\n                                    onChange={(e) => setGender(e.target.value )} \r\n                                    value={gender}  \r\n                                    required=\"required\">\r\n                                        <option value=\"male\">Male</option>\r\n                                        <option value=\"female\">Female</option>\r\n                                    </select>\r\n                                </div>\r\n                                \r\n                                <div className=\"input-field mb-2\">\r\n                                    <input \r\n                                    onChange={(e) => setPassword(e.target.value )} \r\n                                    value={password} \r\n                                    required=\"required\"\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\" />\r\n                                </div>\r\n                                \r\n                                <div className=\"input-field mb-2\">\r\n                                    <input \r\n                                    onChange={(e) => setAvatar(e.target.files[0])}  \r\n                                    type=\"file\" />\r\n                                </div>\r\n                            </form>\r\n                        </Fragment>\r\n\r\n                        <Fragment key={\"footer\"}>\r\n                        <button className='btn-success' onClick={submitForm}>UPDATE</button>\r\n                        </Fragment>\r\n\r\n                    </Modal>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar"]},"metadata":{},"sourceType":"module"}