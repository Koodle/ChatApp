{"ast":null,"code":"/*Reducers are responsible for updating the Store's STATE*/\n//The types of action's available to to the reducer\nimport { LOGIN, REGISTER, LOGOUT, UPDATE_PROFILE } from \"../types/index\"; //check local storage if the user has previously logged in\n//else we set initial state as empty\n\nconst initialState = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || {},\n  token: localStorage.getItem(\"token\") || \"\",\n  isLoggedIn: localStorage.getItem(\"user\") ? true : false\n};\n/* \r\n-Reducer is a pure function so we shouldn’t perform any API calls, route, mutate arguments from actions.\r\n-No Mutations\r\n*/\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  //destructure the action\n  const {\n    type,\n    payload\n  } = action; //check the type of action\n\n  switch (type) {\n    case LOGIN:\n      //We shouldn’t mutate an existing state but return a new state with copied values from the previous state plus the changes.\n      return { ...state,\n        //Merge objects using the spread operator (...)\n        user: payload.user,\n        token: payload.token,\n        isLoggedIn: true\n      };\n\n    case REGISTER:\n      return { ...state,\n        user: payload.user,\n        token: payload.token,\n        isLoggedIn: true\n      };\n\n    case LOGOUT:\n      return { ...state,\n        // we clear all user data\n        user: {},\n        token: \"\",\n        isLoggedIn: false\n      };\n\n    case UPDATE_PROFILE:\n      return { ...state,\n        user: payload\n      };\n\n    default:\n      //if nothing is found -> return just the unchanged state\n      return state;\n  }\n};\n\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/kazim/Desktop/chatApp/chat-frontend/src/store/reducers/auth.js"],"names":["LOGIN","REGISTER","LOGOUT","UPDATE_PROFILE","initialState","user","JSON","parse","localStorage","getItem","token","isLoggedIn","authReducer","state","action","type","payload"],"mappings":"AAAA;AAEA;AACA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,cAAlC,QAAwD,gBAAxD,C,CAEA;AACA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA4C,EADjC;AAEjBC,EAAAA,KAAK,EAAEF,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EAFvB;AAGjBE,EAAAA,UAAU,EAAEH,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+B,IAA/B,GAAsC;AAHjC,CAArB;AAKA;AACA;AACA;AACA;;AACA,MAAMG,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBT,YAAyB;AAAA,MAAXU,MAAW;AAElD;AACA,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBF,MAAxB,CAHkD,CAKlD;;AACA,UAAOC,IAAP;AACI,SAAKf,KAAL;AACI;AACA,aAAO,EACH,GAAGa,KADA;AACS;AACZR,QAAAA,IAAI,EAAEW,OAAO,CAACX,IAFX;AAGHK,QAAAA,KAAK,EAAEM,OAAO,CAACN,KAHZ;AAIHC,QAAAA,UAAU,EAAE;AAJT,OAAP;;AAOJ,SAAKV,QAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHR,QAAAA,IAAI,EAAEW,OAAO,CAACX,IAFX;AAGHK,QAAAA,KAAK,EAAEM,OAAO,CAACN,KAHZ;AAIHC,QAAAA,UAAU,EAAE;AAJT,OAAP;;AAOJ,SAAKT,MAAL;AACI,aAAM,EACF,GAAGW,KADD;AAEF;AACAR,QAAAA,IAAI,EAAE,EAHJ;AAIFK,QAAAA,KAAK,EAAE,EAJL;AAKFC,QAAAA,UAAU,EAAE;AALV,OAAN;;AAQJ,SAAKR,cAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHR,QAAAA,IAAI,EAAEW;AAFH,OAAP;;AAKJ;AACI;AACA,aAAOH,KAAP;AAnCR;AAqCH,CA3CD;;AA6CA,eAAeD,WAAf","sourcesContent":["/*Reducers are responsible for updating the Store's STATE*/\r\n\r\n//The types of action's available to to the reducer\r\nimport { LOGIN, REGISTER, LOGOUT, UPDATE_PROFILE } from \"../types/index\"\r\n\r\n//check local storage if the user has previously logged in\r\n//else we set initial state as empty\r\nconst initialState = {\r\n    user: JSON.parse(localStorage.getItem(\"user\")) || {},\r\n    token: localStorage.getItem(\"token\") || \"\",\r\n    isLoggedIn: localStorage.getItem(\"user\") ? true : false\r\n}\r\n/* \r\n-Reducer is a pure function so we shouldn’t perform any API calls, route, mutate arguments from actions.\r\n-No Mutations\r\n*/\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    //destructure the action\r\n    const {type, payload} = action\r\n\r\n    //check the type of action\r\n    switch(type){\r\n        case LOGIN:\r\n            //We shouldn’t mutate an existing state but return a new state with copied values from the previous state plus the changes.\r\n            return {\r\n                ...state,   //Merge objects using the spread operator (...)\r\n                user: payload.user,\r\n                token: payload.token,\r\n                isLoggedIn: true         \r\n            }\r\n\r\n        case REGISTER:\r\n            return {\r\n                ...state,\r\n                user: payload.user,\r\n                token: payload.token,\r\n                isLoggedIn: true         \r\n            }\r\n\r\n        case LOGOUT:\r\n            return{\r\n                ...state,\r\n                // we clear all user data\r\n                user: {},\r\n                token: \"\",\r\n                isLoggedIn: false\r\n            }\r\n\r\n        case UPDATE_PROFILE:\r\n            return {\r\n                ...state,\r\n                user: payload,\r\n            }\r\n\r\n        default:\r\n            //if nothing is found -> return just the unchanged state\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer\r\n"]},"metadata":{},"sourceType":"module"}