{"ast":null,"code":"//To make HTTP requests to our Back-End\nimport ChatService from \"../../services/chatService\";\nexport const FETCH_CHATS = \"FETCH_CHATS\";\nexport const SET_CURRENT_CHAT = \"SET_CURRENT_CHAT\";\n/*\r\n-Components will trigger actions from events (button clicks, form submits)\r\n-Actions are objects that contain Type & Payload\r\n-Type determines what in the Store gets updated\r\n-Payload represents data to be added, updated or removed from the store\r\n*/\n\nexport const fetchChats = () => dispatch => {\n  return ChatService.fetchChats().then(data => {\n    //for each user => set default status to be offline\n    data.forEach(chat => {\n      chat.Users.forEach(user => {\n        user.status = \"offline\";\n      }); //reverse all messages inside a chat\n\n      chat.Messages.reverse();\n    }); //dispatch reducer\n\n    dispatch({\n      type: FETCH_CHATS,\n      payload: data\n    });\n    return data;\n  }).catch(err => {\n    throw err;\n  });\n};\nexport const setCurrentChat = chat => dispatch => {\n  dispatch({\n    type: SET_CURRENT_CHAT,\n    payload: chat\n  });\n};","map":{"version":3,"sources":["C:/Users/kazim/Desktop/chatApp/chat-frontend/src/store/actions/chat.js"],"names":["ChatService","FETCH_CHATS","SET_CURRENT_CHAT","fetchChats","dispatch","then","data","forEach","chat","Users","user","status","Messages","reverse","type","payload","catch","err","setCurrentChat"],"mappings":"AAAA;AACA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAMC,QAAQ,IAAI;AACxC,SAAOJ,WAAW,CAACG,UAAZ,GACFE,IADE,CACGC,IAAI,IAAI;AACV;AACAA,IAAAA,IAAI,CAACC,OAAL,CAAaC,IAAI,IAAI;AACjBA,MAAAA,IAAI,CAACC,KAAL,CAAWF,OAAX,CAAmBG,IAAI,IAAI;AACvBA,QAAAA,IAAI,CAACC,MAAL,GAAc,SAAd;AACH,OAFD,EADiB,CAIjB;;AACAH,MAAAA,IAAI,CAACI,QAAL,CAAcC,OAAd;AACH,KAND,EAFU,CAUV;;AACAT,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAEb,WAAR;AAAqBc,MAAAA,OAAO,EAAET;AAA9B,KAAD,CAAR;AACA,WAAOA,IAAP;AACH,GAdE,EAeFU,KAfE,CAeKC,GAAG,IAAI;AACX,UAAMA,GAAN;AACH,GAjBE,CAAP;AAkBH,CAnBM;AAqBP,OAAO,MAAMC,cAAc,GAAIV,IAAD,IAAUJ,QAAQ,IAAI;AAChDA,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAEZ,gBAAR;AAA0Ba,IAAAA,OAAO,EAAEP;AAAnC,GAAD,CAAR;AACH,CAFM","sourcesContent":["//To make HTTP requests to our Back-End\r\nimport ChatService from \"../../services/chatService\"\r\nexport const FETCH_CHATS = \"FETCH_CHATS\"\r\nexport const SET_CURRENT_CHAT = \"SET_CURRENT_CHAT\"\r\n\r\n/*\r\n-Components will trigger actions from events (button clicks, form submits)\r\n-Actions are objects that contain Type & Payload\r\n-Type determines what in the Store gets updated\r\n-Payload represents data to be added, updated or removed from the store\r\n*/\r\n\r\nexport const fetchChats = () => dispatch => {\r\n    return ChatService.fetchChats()\r\n        .then(data => {\r\n            //for each user => set default status to be offline\r\n            data.forEach(chat => {\r\n                chat.Users.forEach(user => {\r\n                    user.status = \"offline\"\r\n                });\r\n                //reverse all messages inside a chat\r\n                chat.Messages.reverse()\r\n            });\r\n\r\n            //dispatch reducer\r\n            dispatch({ type: FETCH_CHATS, payload: data })\r\n            return data\r\n        })\r\n        .catch((err => {\r\n            throw err\r\n        }))\r\n}\r\n\r\nexport const setCurrentChat = (chat) => dispatch => {\r\n    dispatch({ type: SET_CURRENT_CHAT, payload: chat })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}